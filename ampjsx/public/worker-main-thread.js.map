{"version":3,"file":"index.js","sources":["../output/main-thread/commands/event-subscription.js","../output/main-thread/commands/bounding-client-rect.js","../output/main-thread/commands/child-list.js","../output/main-thread/commands/attribute.js","../output/main-thread/commands/character-data.js","../output/main-thread/commands/property.js","../output/main-thread/commands/long-task.js"],"sourcesContent":["/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EVENT_SUBSCRIPTION_LENGTH } from '../../transfer/TransferrableEvent';\n/**\n * Instead of a whitelist of elements that need their value tracked, use the existence\n * of a property called value to drive the decision.\n * @param node node to check if values should be tracked.\n * @return boolean if the node should have its value property tracked.\n */\nconst shouldTrackChanges = (node) => node && 'value' in node;\n/**\n * When a node that has a value needing synced doesn't already have an event listener\n * listening for changed values, ensure the value is synced with a default listener.\n * @param worker whom to dispatch value toward.\n * @param node node to listen to value changes on.\n */\nconst applyDefaultChangeListener = (workerContext, node) => {\n    shouldTrackChanges(node) && node.onchange === null && (node.onchange = () => fireValueChange(workerContext, node));\n};\n/**\n * Tell WorkerDOM what the value is for a Node.\n * @param worker whom to dispatch value toward.\n * @param node where to get the value from.\n */\nconst fireValueChange = (workerContext, node) => workerContext.messageToWorker({\n    [12 /* type */]: 4 /* SYNC */,\n    [40 /* sync */]: {\n        [7 /* index */]: node._index_,\n        [21 /* value */]: node.value,\n    },\n});\n/**\n * Tell WorkerDOM what the window dimensions are.\n * @param workerContext\n * @param cachedWindowSize\n */\nconst fireResizeChange = (workerContext, cachedWindowSize) => workerContext.messageToWorker({\n    [12 /* type */]: 5 /* RESIZE */,\n    [40 /* sync */]: cachedWindowSize,\n});\nexport function EventSubscriptionProcessor(strings, nodeContext, workerContext) {\n    const knownListeners = [];\n    let cachedWindowSize = [window.innerWidth, window.innerHeight];\n    /**\n     * Register an event handler for dispatching events to worker thread\n     * @param worker whom to dispatch events toward\n     * @param index node index the event comes from (used to dispatchEvent in worker thread).\n     * @return eventHandler function consuming event and dispatching to worker thread\n     */\n    const eventHandler = (index) => (event) => {\n        if (shouldTrackChanges(event.currentTarget)) {\n            fireValueChange(workerContext, event.currentTarget);\n        }\n        else if (event.type === 'resize') {\n            const { innerWidth, innerHeight } = window;\n            if (cachedWindowSize[0] === innerWidth && cachedWindowSize[1] === innerHeight) {\n                return;\n            }\n            cachedWindowSize = [window.innerWidth, window.innerHeight];\n            fireResizeChange(workerContext, cachedWindowSize);\n        }\n        workerContext.messageToWorker({\n            [12 /* type */]: 1 /* EVENT */,\n            [39 /* event */]: {\n                [7 /* index */]: index,\n                [25 /* bubbles */]: event.bubbles,\n                [26 /* cancelable */]: event.cancelable,\n                [27 /* cancelBubble */]: event.cancelBubble,\n                [28 /* currentTarget */]: [event.currentTarget._index_ || 0],\n                [29 /* defaultPrevented */]: event.defaultPrevented,\n                [30 /* eventPhase */]: event.eventPhase,\n                [31 /* isTrusted */]: event.isTrusted,\n                [32 /* returnValue */]: event.returnValue,\n                [13 /* target */]: [event.target._index_ || 0],\n                [33 /* timeStamp */]: event.timeStamp,\n                [12 /* type */]: event.type,\n                [35 /* keyCode */]: 'keyCode' in event ? event.keyCode : undefined,\n            },\n        });\n    };\n    /**\n     * If the worker requests to add an event listener to 'change' for something the foreground thread is already listening to,\n     * ensure that only a single 'change' event is attached to prevent sending values multiple times.\n     * @param target node to change listeners on\n     * @param addEvent is this an 'addEvent' or 'removeEvent' change\n     * @param type event type requested to change\n     * @param index number in the listeners array this event corresponds to.\n     */\n    const processListenerChange = (target, addEvent, type, index) => {\n        let changeEventSubscribed = target.onchange !== null;\n        const shouldTrack = shouldTrackChanges(target);\n        const isChangeEvent = type === 'change';\n        const isResizeEvent = type === 'resize';\n        if (addEvent) {\n            if (isResizeEvent && target === nodeContext.baseElement) {\n                addEventListener(type, (knownListeners[index] = eventHandler(1)));\n                return;\n            }\n            if (isChangeEvent) {\n                changeEventSubscribed = true;\n                target.onchange = null;\n            }\n            target.addEventListener(type, (knownListeners[index] = eventHandler(target._index_)));\n        }\n        else {\n            if (isResizeEvent && target === nodeContext.baseElement) {\n                removeEventListener(type, knownListeners[index]);\n                return;\n            }\n            if (isChangeEvent) {\n                changeEventSubscribed = false;\n            }\n            target.removeEventListener(type, knownListeners[index]);\n        }\n        if (shouldTrack && !changeEventSubscribed) {\n            applyDefaultChangeListener(workerContext, target);\n        }\n    };\n    return {\n        execute(mutations, startPosition, target) {\n            const addEventListenerCount = mutations[startPosition + 3 /* AddEventListenerCount */];\n            const removeEventListenerCount = mutations[startPosition + 2 /* RemoveEventListenerCount */];\n            const addEventListenersPosition = startPosition + 4 /* Events */ + removeEventListenerCount * EVENT_SUBSCRIPTION_LENGTH;\n            const endPosition = startPosition + 4 /* Events */ + (addEventListenerCount + removeEventListenerCount) * EVENT_SUBSCRIPTION_LENGTH;\n            if (target) {\n                for (let iterator = startPosition + 4 /* Events */; iterator < endPosition; iterator += EVENT_SUBSCRIPTION_LENGTH) {\n                    processListenerChange(target, iterator <= addEventListenersPosition, strings.get(mutations[iterator]), mutations[iterator + 1]);\n                }\n            }\n            else {\n                console.error(`getNode() yields null â€“ ${target}`);\n            }\n            return endPosition;\n        },\n        print(mutations, startPosition, target) {\n            const addEventListenerCount = mutations[startPosition + 3 /* AddEventListenerCount */];\n            const removeEventListenerCount = mutations[startPosition + 2 /* RemoveEventListenerCount */];\n            const addEventListenersPosition = startPosition + 4 /* Events */ + removeEventListenerCount * EVENT_SUBSCRIPTION_LENGTH;\n            const endPosition = startPosition + 4 /* Events */ + (addEventListenerCount + removeEventListenerCount) * EVENT_SUBSCRIPTION_LENGTH;\n            let removedEventListeners = [];\n            let addedEventListeners = [];\n            for (let iterator = startPosition + 4 /* Events */; iterator < endPosition; iterator += EVENT_SUBSCRIPTION_LENGTH) {\n                const eventList = iterator <= addEventListenersPosition ? addedEventListeners : removedEventListeners;\n                eventList.push({\n                    type: strings.get(mutations[iterator]),\n                    index: mutations[iterator + 1],\n                });\n            }\n            return {\n                target,\n                removedEventListeners,\n                addedEventListeners,\n            };\n        },\n    };\n}\n//# sourceMappingURL=event-subscription.js.map","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function BoundingClientRectProcessor(workerContext) {\n    return {\n        execute(mutations, startPosition, target) {\n            if (target) {\n                const boundingRect = target.getBoundingClientRect();\n                workerContext.messageToWorker({\n                    [12 /* type */]: 6 /* GET_BOUNDING_CLIENT_RECT */,\n                    [13 /* target */]: [target._index_],\n                    [38 /* data */]: [\n                        boundingRect.top,\n                        boundingRect.right,\n                        boundingRect.bottom,\n                        boundingRect.left,\n                        boundingRect.width,\n                        boundingRect.height,\n                    ],\n                });\n            }\n            else {\n                console.error(`getNode() yields null â€“ ${target}`);\n            }\n            return startPosition + 2 /* End */;\n        },\n        print(mutations, startPosition, target) {\n            return {\n                type: 'GET_BOUNDING_CLIENT_RECT',\n                target,\n            };\n        },\n    };\n}\n//# sourceMappingURL=bounding-client-rect.js.map","/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function ChildListProcessor({ getNode }) {\n    return {\n        execute(mutations, startPosition, target) {\n            const appendNodeCount = mutations[startPosition + 4 /* AppendedNodeCount */];\n            const removeNodeCount = mutations[startPosition + 5 /* RemovedNodeCount */];\n            if (removeNodeCount > 0) {\n                mutations\n                    .slice(startPosition + 6 /* Nodes */ + appendNodeCount, startPosition + 6 /* Nodes */ + appendNodeCount + removeNodeCount)\n                    .forEach(removeId => {\n                    const node = getNode(removeId);\n                    if (!node) {\n                        console.error(`getNode() yields null â€“ ${removeId}`);\n                        return;\n                    }\n                    node.remove();\n                });\n            }\n            if (appendNodeCount > 0) {\n                mutations\n                    .slice(startPosition + 6 /* Nodes */, startPosition + 6 /* Nodes */ + appendNodeCount)\n                    .forEach(addId => {\n                    const nextSibling = mutations[startPosition + 2 /* NextSibling */];\n                    const newNode = getNode(addId);\n                    if (newNode) {\n                        // TODO: Handle this case ---\n                        // Transferred nodes that are not stored were previously removed by the sanitizer.\n                        target.insertBefore(newNode, (nextSibling && getNode(nextSibling)) || null);\n                    }\n                });\n            }\n            return startPosition + 6 /* End */ + appendNodeCount + removeNodeCount;\n        },\n        print(mutations, startPosition, target) {\n            const appendNodeCount = mutations[startPosition + 4 /* AppendedNodeCount */];\n            const removeNodeCount = mutations[startPosition + 5 /* RemovedNodeCount */];\n            const removedNodes = Array.from(mutations.slice(startPosition + 6 /* Nodes */ + appendNodeCount, startPosition + 6 /* Nodes */ + appendNodeCount + removeNodeCount)).map(index => getNode(index) || index);\n            const addedNodes = Array.from(mutations.slice(startPosition + 6 /* Nodes */, startPosition + 6 /* Nodes */ + appendNodeCount)).map(index => getNode(index) || index);\n            return {\n                target,\n                nextSibling: getNode(mutations[startPosition + 2 /* NextSibling */]) || null,\n                previousSibling: getNode(mutations[startPosition + 3 /* PreviousSibling */]) || null,\n                addedNodes,\n                removedNodes,\n            };\n        },\n    };\n}\n//# sourceMappingURL=child-list.js.map","/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function AttributeProcessor(strings, config) {\n    return {\n        execute(mutations, startPosition, target) {\n            const attributeName = strings.get(mutations[startPosition + 2 /* Name */]);\n            // Value is sent as 0 when it's the default value or removal.\n            // Value is sent as index + 1 when it's a valid value.\n            const rawValue = mutations[startPosition + 4 /* Value */] === 0 ? null : strings.get(mutations[startPosition + 4 /* Value */] - 1);\n            const value = rawValue != null ? String(rawValue) : null;\n            if (attributeName != null) {\n                if (value == null) {\n                    target.removeAttribute(attributeName);\n                }\n                else {\n                    if (!config.sanitizer || config.sanitizer.validAttribute(target.nodeName, attributeName, value)) {\n                        target.setAttribute(attributeName, value);\n                    }\n                    else {\n                        // TODO(choumx): Inform worker that sanitizer ignored unsafe attribute value change.\n                    }\n                }\n            }\n            return startPosition + 5 /* End */;\n        },\n        print(mutations, startPosition, target) {\n            const attributeName = strings.get(mutations[startPosition + 2 /* Name */]);\n            // Value is sent as 0 when it's the default value or removal.\n            // Value is sent as index + 1 when it's a valid value.\n            const rawValue = (mutations[startPosition + 4 /* Value */] !== 0 && strings.get(mutations[startPosition + 4 /* Value */] - 1));\n            const value = rawValue != null ? String(rawValue) : null;\n            return {\n                target,\n                attributeName,\n                value,\n                remove: value == null,\n            };\n        },\n    };\n}\n//# sourceMappingURL=attribute.js.map","/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function CharacterDataProcessor(strings) {\n    return {\n        execute(mutations, startPosition, target) {\n            const value = mutations[startPosition + 2 /* Value */];\n            if (value) {\n                // Sanitization not necessary for textContent.\n                target.textContent = strings.get(value);\n            }\n            return startPosition + 3 /* End */;\n        },\n        print(mutations, startPosition, target) {\n            return {\n                target,\n                value: strings.get(mutations[startPosition + 2 /* Value */]),\n            };\n        },\n    };\n}\n//# sourceMappingURL=character-data.js.map","/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function PropertyProcessor(strings, config) {\n    return {\n        execute(mutations, startPosition, target) {\n            const name = strings.get(mutations[startPosition + 2 /* Name */]);\n            const isBooleanProperty = mutations[startPosition + 3 /* IsBoolean */] === 1 /* TRUE */;\n            const value = isBooleanProperty\n                ? mutations[startPosition + 4 /* Value */] === 1 /* TRUE */\n                : (mutations[startPosition + 4 /* Value */] !== 0 && strings.get(mutations[startPosition + 4 /* Value */])) ||\n                    null;\n            if (name && value != null) {\n                if (!config.sanitizer || config.sanitizer.validProperty(target.nodeName, name, String(value))) {\n                    target[name] = value;\n                }\n                else {\n                    // TODO(choumx): Inform worker that sanitizer ignored unsafe property value change.\n                }\n            }\n            return startPosition + 5 /* End */;\n        },\n        print(mutations, startPosition, target) {\n            const name = strings.get(mutations[startPosition + 2 /* Name */]);\n            const isBooleanProperty = mutations[startPosition + 3 /* IsBoolean */] === 1 /* TRUE */;\n            const value = isBooleanProperty\n                ? mutations[startPosition + 4 /* Value */] === 1 /* TRUE */\n                : (mutations[startPosition + 4 /* Value */] !== 0 && strings.get(mutations[startPosition + 4 /* Value */])) ||\n                    null;\n            return {\n                target,\n                name,\n                value,\n            };\n        },\n    };\n}\n//# sourceMappingURL=property.js.map","/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ReadableMutationType } from '../../transfer/TransferrableMutation';\nexport function LongTaskExecutor(config) {\n    let index = 0;\n    let currentResolver;\n    return {\n        execute(mutations, startPosition, target) {\n            if (config.longTask) {\n                if (mutations[startPosition] === 6 /* LONG_TASK_START */) {\n                    index++;\n                    if (!currentResolver) {\n                        config.longTask(new Promise(resolve => (currentResolver = resolve)));\n                    }\n                }\n                else if (mutations[startPosition] === 7 /* LONG_TASK_END */) {\n                    index--;\n                    if (currentResolver && index <= 0) {\n                        currentResolver();\n                        currentResolver = null;\n                        index = 0;\n                    }\n                }\n            }\n            return startPosition + 2 /* End */;\n        },\n        print(mutations, startPosition, target) {\n            return {\n                type: ReadableMutationType[mutations[startPosition]],\n            };\n        },\n        get active() {\n            return currentResolver !== null;\n        },\n    };\n}\n//# sourceMappingURL=long-task.js.map"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAs}